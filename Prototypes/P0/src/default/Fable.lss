
Fable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  00000f20  00000fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000094  00800240  00800240  00000ff4  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ed  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000650  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ee  00000000  00000000  00001871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058d  00000000  00000000  00001b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a3  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b3  00000000  00000000  000024ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_17>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  8c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  90:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__vector_36>
  94:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  98:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  9c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  ac:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  bc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	e0 e2       	ldi	r30, 0x20	; 32
  e4:	ff e0       	ldi	r31, 0x0F	; 15
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a0 34       	cpi	r26, 0x40	; 64
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e4       	ldi	r26, 0x40	; 64
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a4 3d       	cpi	r26, 0xD4	; 212
 102:	b1 07       	cpc	r27, r17
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 8a 01 	call	0x314	; 0x314 <main>
 10a:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <MotherBoard_getLed>:
static volatile long timeMs = 0;



int MotherBoard_getLed(int index) {
	if(index==0) {
 112:	00 97       	sbiw	r24, 0x00	; 0
 114:	69 f4       	brne	.+26     	; 0x130 <MotherBoard_getLed+0x1e>
		return (~PINB & (1<<LED_0_PIN))!=0;
 116:	83 b1       	in	r24, 0x03	; 3
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	96 e0       	ldi	r25, 0x06	; 6
 11e:	36 95       	lsr	r19
 120:	27 95       	ror	r18
 122:	9a 95       	dec	r25
 124:	e1 f7       	brne	.-8      	; 0x11e <MotherBoard_getLed+0xc>
 126:	20 95       	com	r18
 128:	30 95       	com	r19
 12a:	21 70       	andi	r18, 0x01	; 1
 12c:	30 70       	andi	r19, 0x00	; 0
 12e:	10 c0       	rjmp	.+32     	; 0x150 <MotherBoard_getLed+0x3e>
	}
	else if(index == 1) {
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	19 f0       	breq	.+6      	; 0x13a <MotherBoard_getLed+0x28>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	0b c0       	rjmp	.+22     	; 0x150 <MotherBoard_getLed+0x3e>
		return (~PINB & (1<<LED_1_PIN))!=0;
 13a:	83 b1       	in	r24, 0x03	; 3
 13c:	28 2f       	mov	r18, r24
 13e:	33 27       	eor	r19, r19
 140:	27 fd       	sbrc	r18, 7
 142:	30 95       	com	r19
 144:	20 95       	com	r18
 146:	30 95       	com	r19
 148:	22 27       	eor	r18, r18
 14a:	33 0f       	add	r19, r19
 14c:	22 1f       	adc	r18, r18
 14e:	33 27       	eor	r19, r19
	}
	else return 0;
}
 150:	c9 01       	movw	r24, r18
 152:	08 95       	ret

00000154 <MotherBoard_setLed>:

void MotherBoard_setLed(int index) {
	if(index==0) {
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	11 f4       	brne	.+4      	; 0x15c <MotherBoard_setLed+0x8>
		PORTB = PORTB & ~(1<<LED_0_PIN);
 158:	2e 98       	cbi	0x05, 6	; 5
 15a:	08 95       	ret
	}
	else if(index == 1) {
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	09 f4       	brne	.+2      	; 0x162 <MotherBoard_setLed+0xe>
		PORTB = PORTB & ~(1<<LED_1_PIN);
 160:	2f 98       	cbi	0x05, 7	; 5
 162:	08 95       	ret

00000164 <MotherBoard_clearLed>:
}



void MotherBoard_clearLed(int index) {
	if(index==0) {
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	11 f4       	brne	.+4      	; 0x16c <MotherBoard_clearLed+0x8>
		PORTB = PORTB | (1<<LED_0_PIN);
 168:	2e 9a       	sbi	0x05, 6	; 5
 16a:	08 95       	ret
	}
	else if(index == 1) {
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	09 f4       	brne	.+2      	; 0x172 <MotherBoard_clearLed+0xe>
		PORTB = PORTB | (1<<LED_1_PIN);
 170:	2f 9a       	sbi	0x05, 7	; 5
 172:	08 95       	ret

00000174 <MotherBoard_toggleLed>:
	}	
}

void MotherBoard_toggleLed(int index) {
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	if(MotherBoard_getLed(index)==0) {
 17a:	0e 94 89 00 	call	0x112	; 0x112 <MotherBoard_getLed>
 17e:	89 2b       	or	r24, r25
 180:	21 f4       	brne	.+8      	; 0x18a <MotherBoard_toggleLed+0x16>
		MotherBoard_setLed(index);
 182:	ce 01       	movw	r24, r28
 184:	0e 94 aa 00 	call	0x154	; 0x154 <MotherBoard_setLed>
 188:	03 c0       	rjmp	.+6      	; 0x190 <MotherBoard_toggleLed+0x1c>
	}
	else {
		MotherBoard_clearLed(index);
 18a:	ce 01       	movw	r24, r28
 18c:	0e 94 b2 00 	call	0x164	; 0x164 <MotherBoard_clearLed>
	}
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <MotherBoard_initLeds>:

void MotherBoard_initLeds() {
	DDRB  = DDRB | (1<<LED_0_PIN) | (1<<LED_1_PIN); //set direction on the two pins
 196:	84 b1       	in	r24, 0x04	; 4
 198:	80 6c       	ori	r24, 0xC0	; 192
 19a:	84 b9       	out	0x04, r24	; 4
	MotherBoard_clearLed(0);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 b2 00 	call	0x164	; 0x164 <MotherBoard_clearLed>
	MotherBoard_clearLed(1);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 b2 00 	call	0x164	; 0x164 <MotherBoard_clearLed>
}
 1ac:	08 95       	ret

000001ae <__vector_17>:
			asm("nop");	
		}
	}
}

ISR(TIMER1_COMPA_vect) {
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	0b b6       	in	r0, 0x3b	; 59
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
	timeMs++;
 1c8:	80 91 42 02 	lds	r24, 0x0242
 1cc:	90 91 43 02 	lds	r25, 0x0243
 1d0:	a0 91 44 02 	lds	r26, 0x0244
 1d4:	b0 91 45 02 	lds	r27, 0x0245
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	a1 1d       	adc	r26, r1
 1dc:	b1 1d       	adc	r27, r1
 1de:	80 93 42 02 	sts	0x0242, r24
 1e2:	90 93 43 02 	sts	0x0243, r25
 1e6:	a0 93 44 02 	sts	0x0244, r26
 1ea:	b0 93 45 02 	sts	0x0245, r27
	OCR1A += 124;
 1ee:	e8 e8       	ldi	r30, 0x88	; 136
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	91 81       	ldd	r25, Z+1	; 0x01
 1f6:	84 58       	subi	r24, 0x84	; 132
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	80 83       	st	Z, r24
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0b be       	out	0x3b, r0	; 59
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <testTimer>:

}

void testTimer() {
	//Init Timer
	TCCR1B = (1<<CS11)|(1<<CS10); //64 prescaler
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 124;
 21e:	8c e7       	ldi	r24, 0x7C	; 124
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	90 93 89 00 	sts	0x0089, r25
 226:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 = 0;
 230:	10 92 85 00 	sts	0x0085, r1
 234:	10 92 84 00 	sts	0x0084, r1
	sei();
 238:	78 94       	sei
}
 23a:	08 95       	ret

0000023c <getADC>:
	printf("Serial Initialized\n");
	sei();
}

int getADC(int index) {
	if(index==0) {
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	11 f4       	brne	.+4      	; 0x244 <getADC+0x8>
		ADMUX = (1<<REFS1) | (1<<REFS0) | 0 ;		// ADC Port 1 Select
 240:	80 ec       	ldi	r24, 0xC0	; 192
 242:	08 c0       	rjmp	.+16     	; 0x254 <getADC+0x18>
	}
	else if(index==1) {
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 05       	cpc	r25, r1
 248:	11 f4       	brne	.+4      	; 0x24e <getADC+0x12>
		ADMUX = (1<<REFS1) | (1<<REFS0) | 1;
 24a:	81 ec       	ldi	r24, 0xC1	; 193
 24c:	03 c0       	rjmp	.+6      	; 0x254 <getADC+0x18>
	}
	else if(index==2) {
 24e:	02 97       	sbiw	r24, 0x02	; 2
 250:	19 f4       	brne	.+6      	; 0x258 <getADC+0x1c>
		ADMUX = (1<<REFS1) | (1<<REFS0) | 2;
 252:	82 ec       	ldi	r24, 0xC2	; 194
 254:	80 93 7c 00 	sts	0x007C, r24
	timeMs++;
	OCR1A += 124;
}

static void delayMs(int msDelay) {
	long endTime = timeMs + msDelay;
 258:	20 91 42 02 	lds	r18, 0x0242
 25c:	30 91 43 02 	lds	r19, 0x0243
 260:	40 91 44 02 	lds	r20, 0x0244
 264:	50 91 45 02 	lds	r21, 0x0245
 268:	26 5f       	subi	r18, 0xF6	; 246
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	4f 4f       	sbci	r20, 0xFF	; 255
 26e:	5f 4f       	sbci	r21, 0xFF	; 255
	while(endTime>timeMs);
 270:	80 91 42 02 	lds	r24, 0x0242
 274:	90 91 43 02 	lds	r25, 0x0243
 278:	a0 91 44 02 	lds	r26, 0x0244
 27c:	b0 91 45 02 	lds	r27, 0x0245
 280:	82 17       	cp	r24, r18
 282:	93 07       	cpc	r25, r19
 284:	a4 07       	cpc	r26, r20
 286:	b5 07       	cpc	r27, r21
 288:	9c f3       	brlt	.-26     	; 0x270 <getADC+0x34>
	}
	else if(index==2) {
		ADMUX = (1<<REFS1) | (1<<REFS0) | 2;
	}
	delayMs(10);					// Short Delay for rising sensor signal
	ADCSRA |= (1 << ADIF);		// AD-Conversion Interrupt Flag Clear
 28a:	80 91 7a 00 	lds	r24, 0x007A
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);		// AD-Conversion Start
 294:	80 91 7a 00 	lds	r24, 0x007A
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	80 93 7a 00 	sts	0x007A, r24
	timeMs++;
	OCR1A += 124;
}

static void delayMs(int msDelay) {
	long endTime = timeMs + msDelay;
 29e:	20 91 42 02 	lds	r18, 0x0242
 2a2:	30 91 43 02 	lds	r19, 0x0243
 2a6:	40 91 44 02 	lds	r20, 0x0244
 2aa:	50 91 45 02 	lds	r21, 0x0245
 2ae:	26 5f       	subi	r18, 0xF6	; 246
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
 2b2:	4f 4f       	sbci	r20, 0xFF	; 255
 2b4:	5f 4f       	sbci	r21, 0xFF	; 255
	while(endTime>timeMs);
 2b6:	80 91 42 02 	lds	r24, 0x0242
 2ba:	90 91 43 02 	lds	r25, 0x0243
 2be:	a0 91 44 02 	lds	r26, 0x0244
 2c2:	b0 91 45 02 	lds	r27, 0x0245
 2c6:	82 17       	cp	r24, r18
 2c8:	93 07       	cpc	r25, r19
 2ca:	a4 07       	cpc	r26, r20
 2cc:	b5 07       	cpc	r27, r21
 2ce:	9c f3       	brlt	.-26     	; 0x2b6 <getADC+0x7a>
	}
	delayMs(10);					// Short Delay for rising sensor signal
	ADCSRA |= (1 << ADIF);		// AD-Conversion Interrupt Flag Clear
	ADCSRA |= (1 << ADSC);		// AD-Conversion Start
	delayMs(10);
	while( !(ADCSRA & (1 << ADIF)) );	// Wait until AD-Conversion complete
 2d0:	80 91 7a 00 	lds	r24, 0x007A
 2d4:	84 ff       	sbrs	r24, 4
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <getADC+0x94>
	return ADC;
 2d8:	20 91 78 00 	lds	r18, 0x0078
 2dc:	30 91 79 00 	lds	r19, 0x0079
}
 2e0:	c9 01       	movw	r24, r18
 2e2:	08 95       	ret

000002e4 <testAccelerometer>:

void testAccelerometer() {
	DDRF  = DDRF | (1<<ACC_X_PIN) | (1<<ACC_Y_PIN) | (1<<ACC_Z_PIN); 	 //set to input
 2e4:	80 b3       	in	r24, 0x10	; 16
 2e6:	8e 60       	ori	r24, 0x0E	; 14
 2e8:	80 bb       	out	0x10, r24	; 16
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);	// ADC Enable, Clock 1/64div.
 2ea:	86 e8       	ldi	r24, 0x86	; 134
 2ec:	80 93 7a 00 	sts	0x007A, r24
}
 2f0:	08 95       	ret

000002f2 <testSpeaker>:

void testSpeaker() {
	DDRG  = DDRG & ~(1<<SPEAKER_PIN);
 2f2:	9d 98       	cbi	0x13, 5	; 19
	PING  = PING | (1<<SPEAKER_PIN);
 2f4:	95 9a       	sbi	0x12, 5	; 18
	//TCCR0A = (1<<COM0A1)|(1<<COM0A0);  //Set OC0A on Compare Match
	//TCCR0B = (1<<FOC0A)|(1<<CS01)|(1<<CS00); //Force Output Compare A and 64 prescaler
	//OCR0A = 249;	//1ms according to KAVRCalc (16Mhz, 1msm, 64 prescaler, 0.0% error)
	//TIMSK0 = 1<<OCIE0A; 	// Enable Timer 0 Output Compare A Match Event Interrupt

}
 2f6:	08 95       	ret

000002f8 <testSerial>:
	TCNT1 = 0;
	sei();
}

void testSerial() {
	DDRD  = DDRD & ~(1<<USART1_PIN_RX);  //RX set to output
 2f8:	52 98       	cbi	0x0a, 2	; 10
	DDRD  = DDRD | (1<<USART1_PIN_TX); 	 //TX set to input
 2fa:	53 9a       	sbi	0x0a, 3	; 10
	serial_initialize(57600);			// USART Initialize (57600 is a dummy value for now!)
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	71 ee       	ldi	r23, 0xE1	; 225
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 0c 03 	call	0x618	; 0x618 <serial_initialize>
	printf("Serial Initialized\n");
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	0e 94 8b 03 	call	0x716	; 0x716 <puts>
	sei();
 310:	78 94       	sei
}
 312:	08 95       	ret

00000314 <main>:

}

static int counter=0;
int main() 
{
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
	MotherBoard_initLeds();
 324:	0e 94 cb 00 	call	0x196	; 0x196 <MotherBoard_initLeds>
	testSerial();
 328:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <testSerial>

}

void testTimer() {
	//Init Timer
	TCCR1B = (1<<CS11)|(1<<CS10); //64 prescaler
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 124;
 332:	8c e7       	ldi	r24, 0x7C	; 124
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 89 00 	sts	0x0089, r25
 33a:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1<<OCIE1A);
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 = 0;
 344:	10 92 85 00 	sts	0x0085, r1
 348:	10 92 84 00 	sts	0x0084, r1
	sei();
 34c:	78 94       	sei
	while( !(ADCSRA & (1 << ADIF)) );	// Wait until AD-Conversion complete
	return ADC;
}

void testAccelerometer() {
	DDRF  = DDRF | (1<<ACC_X_PIN) | (1<<ACC_Y_PIN) | (1<<ACC_Z_PIN); 	 //set to input
 34e:	80 b3       	in	r24, 0x10	; 16
 350:	8e 60       	ori	r24, 0x0E	; 14
 352:	80 bb       	out	0x10, r24	; 16
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);	// ADC Enable, Clock 1/64div.
 354:	86 e8       	ldi	r24, 0x86	; 134
 356:	80 93 7a 00 	sts	0x007A, r24
}

void testSpeaker() {
	DDRG  = DDRG & ~(1<<SPEAKER_PIN);
 35a:	9d 98       	cbi	0x13, 5	; 19
	PING  = PING | (1<<SPEAKER_PIN);
 35c:	95 9a       	sbi	0x12, 5	; 18
	testSpeaker();
	while(1) {
		MotherBoard_toggleLed(0);
		delayMs(500);
		MotherBoard_toggleLed(1);  	
		printf("hello world %i ---- ADC=(%i, %i, %i)\n", counter, getADC(0), getADC(1),getADC(2) );
 35e:	c3 e1       	ldi	r28, 0x13	; 19
 360:	d2 e0       	ldi	r29, 0x02	; 2
	testSerial();
	testTimer();
	testAccelerometer();
	testSpeaker();
	while(1) {
		MotherBoard_toggleLed(0);
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 ba 00 	call	0x174	; 0x174 <MotherBoard_toggleLed>
	timeMs++;
	OCR1A += 124;
}

static void delayMs(int msDelay) {
	long endTime = timeMs + msDelay;
 36a:	20 91 42 02 	lds	r18, 0x0242
 36e:	30 91 43 02 	lds	r19, 0x0243
 372:	40 91 44 02 	lds	r20, 0x0244
 376:	50 91 45 02 	lds	r21, 0x0245
 37a:	2c 50       	subi	r18, 0x0C	; 12
 37c:	3e 4f       	sbci	r19, 0xFE	; 254
 37e:	4f 4f       	sbci	r20, 0xFF	; 255
 380:	5f 4f       	sbci	r21, 0xFF	; 255
	while(endTime>timeMs);
 382:	80 91 42 02 	lds	r24, 0x0242
 386:	90 91 43 02 	lds	r25, 0x0243
 38a:	a0 91 44 02 	lds	r26, 0x0244
 38e:	b0 91 45 02 	lds	r27, 0x0245
 392:	82 17       	cp	r24, r18
 394:	93 07       	cpc	r25, r19
 396:	a4 07       	cpc	r26, r20
 398:	b5 07       	cpc	r27, r21
 39a:	9c f3       	brlt	.-26     	; 0x382 <main+0x6e>
	testAccelerometer();
	testSpeaker();
	while(1) {
		MotherBoard_toggleLed(0);
		delayMs(500);
		MotherBoard_toggleLed(1);  	
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 ba 00 	call	0x174	; 0x174 <MotherBoard_toggleLed>
		printf("hello world %i ---- ADC=(%i, %i, %i)\n", counter, getADC(0), getADC(1),getADC(2) );
 3a4:	c0 90 40 02 	lds	r12, 0x0240
 3a8:	d0 90 41 02 	lds	r13, 0x0241
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 1e 01 	call	0x23c	; 0x23c <getADC>
 3b4:	7c 01       	movw	r14, r24
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 1e 01 	call	0x23c	; 0x23c <getADC>
 3be:	8c 01       	movw	r16, r24
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 1e 01 	call	0x23c	; 0x23c <getADC>
 3c8:	2d b7       	in	r18, 0x3d	; 61
 3ca:	3e b7       	in	r19, 0x3e	; 62
 3cc:	2a 50       	subi	r18, 0x0A	; 10
 3ce:	30 40       	sbci	r19, 0x00	; 0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	3e bf       	out	0x3e, r19	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	2d bf       	out	0x3d, r18	; 61
 3da:	ed b7       	in	r30, 0x3d	; 61
 3dc:	fe b7       	in	r31, 0x3e	; 62
 3de:	31 96       	adiw	r30, 0x01	; 1
 3e0:	ad b7       	in	r26, 0x3d	; 61
 3e2:	be b7       	in	r27, 0x3e	; 62
 3e4:	12 96       	adiw	r26, 0x02	; 2
 3e6:	dc 93       	st	X, r29
 3e8:	ce 93       	st	-X, r28
 3ea:	11 97       	sbiw	r26, 0x01	; 1
 3ec:	d3 82       	std	Z+3, r13	; 0x03
 3ee:	c2 82       	std	Z+2, r12	; 0x02
 3f0:	f5 82       	std	Z+5, r15	; 0x05
 3f2:	e4 82       	std	Z+4, r14	; 0x04
 3f4:	17 83       	std	Z+7, r17	; 0x07
 3f6:	06 83       	std	Z+6, r16	; 0x06
 3f8:	91 87       	std	Z+9, r25	; 0x09
 3fa:	80 87       	std	Z+8, r24	; 0x08
 3fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <printf>
		counter++;
 400:	80 91 40 02 	lds	r24, 0x0240
 404:	90 91 41 02 	lds	r25, 0x0241
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 41 02 	sts	0x0241, r25
 40e:	80 93 40 02 	sts	0x0240, r24
 412:	2d b7       	in	r18, 0x3d	; 61
 414:	3e b7       	in	r19, 0x3e	; 62
 416:	26 5f       	subi	r18, 0xF6	; 246
 418:	3f 4f       	sbci	r19, 0xFF	; 255
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	3e bf       	out	0x3e, r19	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	2d bf       	out	0x3d, r18	; 61
 424:	04 c0       	rjmp	.+8      	; 0x42e <main+0x11a>

		while(serial_get_qstate()>0) {
			std_putchar(serial_get_queue());
 426:	0e 94 6f 02 	call	0x4de	; 0x4de <serial_get_queue>
 42a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <std_putchar>
		delayMs(500);
		MotherBoard_toggleLed(1);  	
		printf("hello world %i ---- ADC=(%i, %i, %i)\n", counter, getADC(0), getADC(1),getADC(2) );
		counter++;

		while(serial_get_qstate()>0) {
 42e:	0e 94 32 02 	call	0x464	; 0x464 <serial_get_qstate>
 432:	18 16       	cp	r1, r24
 434:	19 06       	cpc	r1, r25
 436:	0c f0       	brlt	.+2      	; 0x43a <main+0x126>
 438:	94 cf       	rjmp	.-216    	; 0x362 <main+0x4e>
 43a:	f5 cf       	rjmp	.-22     	; 0x426 <main+0x112>

0000043c <serial_write>:

	device = fdevopen( std_putchar, std_getchar );
}

void serial_write( unsigned char *pData, int numbyte )
{
 43c:	ac 01       	movw	r20, r24
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	0c c0       	rjmp	.+24     	; 0x45c <serial_write+0x20>
	int count;

	for( count=0; count<numbyte; count++ )
	{
		while(!bit_is_set(UCSR1A,5));
 444:	80 91 c8 00 	lds	r24, 0x00C8
 448:	85 ff       	sbrs	r24, 5
 44a:	fc cf       	rjmp	.-8      	; 0x444 <serial_write+0x8>
		UDR1 = pData[count];
 44c:	fa 01       	movw	r30, r20
 44e:	e2 0f       	add	r30, r18
 450:	f3 1f       	adc	r31, r19
 452:	80 81       	ld	r24, Z
 454:	80 93 ce 00 	sts	0x00CE, r24

void serial_write( unsigned char *pData, int numbyte )
{
	int count;

	for( count=0; count<numbyte; count++ )
 458:	2f 5f       	subi	r18, 0xFF	; 255
 45a:	3f 4f       	sbci	r19, 0xFF	; 255
 45c:	26 17       	cp	r18, r22
 45e:	37 07       	cpc	r19, r23
 460:	8c f3       	brlt	.-30     	; 0x444 <serial_write+0x8>
	{
		while(!bit_is_set(UCSR1A,5));
		UDR1 = pData[count];
	}
}
 462:	08 95       	ret

00000464 <serial_get_qstate>:

int serial_get_qstate(void)
{
	short NumByte;
	
	if( gbSerialBufferHead == gbSerialBufferTail )
 464:	90 91 c6 02 	lds	r25, 0x02C6
 468:	80 91 c7 02 	lds	r24, 0x02C7
 46c:	98 17       	cp	r25, r24
 46e:	19 f4       	brne	.+6      	; 0x476 <serial_get_qstate+0x12>
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	17 c0       	rjmp	.+46     	; 0x4a4 <serial_get_qstate+0x40>
		NumByte = 0;
	else if( gbSerialBufferHead < gbSerialBufferTail )
 476:	90 91 c6 02 	lds	r25, 0x02C6
 47a:	80 91 c7 02 	lds	r24, 0x02C7
 47e:	98 17       	cp	r25, r24
 480:	38 f4       	brcc	.+14     	; 0x490 <serial_get_qstate+0x2c>
		NumByte = gbSerialBufferTail - gbSerialBufferHead;
 482:	80 91 c7 02 	lds	r24, 0x02C7
 486:	90 91 c6 02 	lds	r25, 0x02C6
 48a:	28 2f       	mov	r18, r24
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <serial_get_qstate+0x3c>
	else
		NumByte = MAXNUM_SERIALBUFF - (gbSerialBufferHead - gbSerialBufferTail);
 490:	80 91 c7 02 	lds	r24, 0x02C7
 494:	90 91 c6 02 	lds	r25, 0x02C6
 498:	28 2f       	mov	r18, r24
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	20 58       	subi	r18, 0x80	; 128
 49e:	3f 4f       	sbci	r19, 0xFF	; 255
 4a0:	29 1b       	sub	r18, r25
 4a2:	31 09       	sbc	r19, r1
	
	return (int)NumByte;
}
 4a4:	c9 01       	movw	r24, r18
 4a6:	08 95       	ret

000004a8 <serial_put_queue>:

void serial_put_queue( unsigned char data )
{
 4a8:	1f 93       	push	r17
 4aa:	18 2f       	mov	r17, r24
	if( serial_get_qstate() == (MAXNUM_SERIALBUFF-1) )
 4ac:	0e 94 32 02 	call	0x464	; 0x464 <serial_get_qstate>
 4b0:	8f 37       	cpi	r24, 0x7F	; 127
 4b2:	91 05       	cpc	r25, r1
 4b4:	91 f0       	breq	.+36     	; 0x4da <serial_put_queue+0x32>
		return;
	
	gbSerialBuffer[gbSerialBufferTail] = data;
 4b6:	e0 91 c7 02 	lds	r30, 0x02C7
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	ea 5b       	subi	r30, 0xBA	; 186
 4be:	fd 4f       	sbci	r31, 0xFD	; 253
 4c0:	10 83       	st	Z, r17

	if( gbSerialBufferTail == (MAXNUM_SERIALBUFF-1) )
 4c2:	80 91 c7 02 	lds	r24, 0x02C7
 4c6:	8f 37       	cpi	r24, 0x7F	; 127
 4c8:	19 f4       	brne	.+6      	; 0x4d0 <serial_put_queue+0x28>
		gbSerialBufferTail = 0;
 4ca:	10 92 c7 02 	sts	0x02C7, r1
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <serial_put_queue+0x32>
	else
		gbSerialBufferTail++;
 4d0:	80 91 c7 02 	lds	r24, 0x02C7
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	80 93 c7 02 	sts	0x02C7, r24
}
 4da:	1f 91       	pop	r17
 4dc:	08 95       	ret

000004de <serial_get_queue>:

unsigned char serial_get_queue(void)
{
	unsigned char data;
	
	if( gbSerialBufferHead == gbSerialBufferTail )
 4de:	90 91 c6 02 	lds	r25, 0x02C6
 4e2:	80 91 c7 02 	lds	r24, 0x02C7
 4e6:	98 17       	cp	r25, r24
 4e8:	11 f4       	brne	.+4      	; 0x4ee <serial_get_queue+0x10>
 4ea:	ef ef       	ldi	r30, 0xFF	; 255
 4ec:	12 c0       	rjmp	.+36     	; 0x512 <serial_get_queue+0x34>
		return 0xff;
		
	data = gbSerialBuffer[gbSerialBufferHead];
 4ee:	e0 91 c6 02 	lds	r30, 0x02C6
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	ea 5b       	subi	r30, 0xBA	; 186
 4f6:	fd 4f       	sbci	r31, 0xFD	; 253
 4f8:	e0 81       	ld	r30, Z
		
	if( gbSerialBufferHead == (MAXNUM_SERIALBUFF-1) )
 4fa:	80 91 c6 02 	lds	r24, 0x02C6
 4fe:	8f 37       	cpi	r24, 0x7F	; 127
 500:	19 f4       	brne	.+6      	; 0x508 <serial_get_queue+0x2a>
		gbSerialBufferHead = 0;
 502:	10 92 c6 02 	sts	0x02C6, r1
 506:	05 c0       	rjmp	.+10     	; 0x512 <serial_get_queue+0x34>
	else
		gbSerialBufferHead++;
 508:	80 91 c6 02 	lds	r24, 0x02C6
 50c:	8f 5f       	subi	r24, 0xFF	; 255
 50e:	80 93 c6 02 	sts	0x02C6, r24
		
	return data;
}
 512:	8e 2f       	mov	r24, r30
 514:	08 95       	ret

00000516 <serial_read>:
		UDR1 = pData[count];
	}
}

unsigned char serial_read( unsigned char *pData, int numbyte )
{
 516:	ef 92       	push	r14
 518:	ff 92       	push	r15
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	7c 01       	movw	r14, r24
 524:	eb 01       	movw	r28, r22
	int count, numgetbyte;
	
	if( gbSerialBufferHead == gbSerialBufferTail )
 526:	90 91 c6 02 	lds	r25, 0x02C6
 52a:	80 91 c7 02 	lds	r24, 0x02C7
 52e:	98 17       	cp	r25, r24
 530:	11 f4       	brne	.+4      	; 0x536 <serial_read+0x20>
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	15 c0       	rjmp	.+42     	; 0x560 <serial_read+0x4a>
		return 0;
	
	numgetbyte = serial_get_qstate();
 536:	0e 94 32 02 	call	0x464	; 0x464 <serial_get_qstate>
 53a:	8c 01       	movw	r16, r24
 53c:	c8 17       	cp	r28, r24
 53e:	d9 07       	cpc	r29, r25
 540:	0c f4       	brge	.+2      	; 0x544 <serial_read+0x2e>
 542:	8e 01       	movw	r16, r28
 544:	c0 e0       	ldi	r28, 0x00	; 0
 546:	d0 e0       	ldi	r29, 0x00	; 0
 548:	07 c0       	rjmp	.+14     	; 0x558 <serial_read+0x42>
	if( numgetbyte > numbyte )
		numgetbyte = numbyte;
	
	for( count=0; count<numgetbyte; count++ )
		pData[count] = serial_get_queue();
 54a:	0e 94 6f 02 	call	0x4de	; 0x4de <serial_get_queue>
 54e:	f7 01       	movw	r30, r14
 550:	ec 0f       	add	r30, r28
 552:	fd 1f       	adc	r31, r29
 554:	80 83       	st	Z, r24
	
	numgetbyte = serial_get_qstate();
	if( numgetbyte > numbyte )
		numgetbyte = numbyte;
	
	for( count=0; count<numgetbyte; count++ )
 556:	21 96       	adiw	r28, 0x01	; 1
 558:	c0 17       	cp	r28, r16
 55a:	d1 07       	cpc	r29, r17
 55c:	b4 f3       	brlt	.-20     	; 0x54a <serial_read+0x34>
		pData[count] = serial_get_queue();
	
	return numgetbyte;
 55e:	80 2f       	mov	r24, r16
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	ff 90       	pop	r15
 56a:	ef 90       	pop	r14
 56c:	08 95       	ret

0000056e <__vector_36>:
		
	return data;
}

SIGNAL(USART1_RX_vect)
{
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	0f 92       	push	r0
 576:	0b b6       	in	r0, 0x3b	; 59
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	serial_put_queue( UDR1 );
 594:	80 91 ce 00 	lds	r24, 0x00CE
 598:	0e 94 54 02 	call	0x4a8	; 0x4a8 <serial_put_queue>
}
 59c:	ff 91       	pop	r31
 59e:	ef 91       	pop	r30
 5a0:	bf 91       	pop	r27
 5a2:	af 91       	pop	r26
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	7f 91       	pop	r23
 5aa:	6f 91       	pop	r22
 5ac:	5f 91       	pop	r21
 5ae:	4f 91       	pop	r20
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0b be       	out	0x3b, r0	; 59
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <std_putchar>:



int std_putchar(char c)
{
 5c2:	df 93       	push	r29
 5c4:	cf 93       	push	r28
 5c6:	0f 92       	push	r0
 5c8:	0f 92       	push	r0
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	28 2f       	mov	r18, r24
 5d0:	ae 01       	movw	r20, r28
 5d2:	4f 5f       	subi	r20, 0xFF	; 255
 5d4:	5f 4f       	sbci	r21, 0xFF	; 255
	char tx[2];
	
    if( c == '\n' )
 5d6:	8a 30       	cpi	r24, 0x0A	; 10
 5d8:	39 f4       	brne	.+14     	; 0x5e8 <std_putchar+0x26>
	{
        tx[0] = '\r';
 5da:	8d e0       	ldi	r24, 0x0D	; 13
 5dc:	89 83       	std	Y+1, r24	; 0x01
		tx[1] = '\n';
 5de:	2a 83       	std	Y+2, r18	; 0x02
		serial_write( (unsigned char*)tx, 2 );
 5e0:	ca 01       	movw	r24, r20
 5e2:	62 e0       	ldi	r22, 0x02	; 2
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <std_putchar+0x2e>
	}
	else
	{
		tx[0] = c;
 5e8:	89 83       	std	Y+1, r24	; 0x01
		serial_write( (unsigned char*)tx, 1 );
 5ea:	ca 01       	movw	r24, r20
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	0e 94 1e 02 	call	0x43c	; 0x43c <serial_write>
	}
	return 0;
}
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	cf 91       	pop	r28
 5fe:	df 91       	pop	r29
 600:	08 95       	ret

00000602 <std_getchar>:

int std_getchar(void)
{
    char rx;
	
	while( serial_get_qstate() == 0 );
 602:	0e 94 32 02 	call	0x464	; 0x464 <serial_get_qstate>
 606:	89 2b       	or	r24, r25
 608:	e1 f3       	breq	.-8      	; 0x602 <std_getchar>
	rx = serial_get_queue();
 60a:	0e 94 6f 02 	call	0x4de	; 0x4de <serial_get_queue>
	
	if( rx == '\r' )
 60e:	8d 30       	cpi	r24, 0x0D	; 13
 610:	09 f4       	brne	.+2      	; 0x614 <std_getchar+0x12>
 612:	8a e0       	ldi	r24, 0x0A	; 10
		rx = '\n';

    return rx;
}
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	08 95       	ret

00000618 <serial_initialize>:
	//Bit 3: Data OverRun
	//Bit 2: Parity Error
	//Bit 1: Double The USART Transmission Speed
	//Bit 0: Multi-Processor Communication Mode
	//UCSR1A = 0b01000010;
	UCSR1A = 0b01000000;
 618:	80 e4       	ldi	r24, 0x40	; 64
 61a:	80 93 c8 00 	sts	0x00C8, r24
	// bit7: enable rx interrupt
    // bit6: enable tx interrupt
    // bit4: enable rx
    // bit3: enable tx
    // bit2: set sendding size(0 = 8bit)
	UCSR1B = 0b10011000;
 61e:	88 e9       	ldi	r24, 0x98	; 152
 620:	80 93 c9 00 	sts	0x00C9, r24
	// set UART register C
	// bit6: communication mode (1 = synchronize, 0 = asynchronize)
    // bit5,bit4: parity bit(00 = no parity) 
    // bit3: stop bit(0 = stop bit 1, 1 = stop bit 2)
    // bit2,bit1: data size(11 = 8bit)
	UCSR1C = 0b00000110;
 624:	86 e0       	ldi	r24, 0x06	; 6
 626:	80 93 ca 00 	sts	0x00CA, r24

	// initialize
	UDR1 = 0xFF;
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	80 93 ce 00 	sts	0x00CE, r24
	gbSerialBufferHead = 0;
 630:	10 92 c6 02 	sts	0x02C6, r1
	gbSerialBufferTail = 0;
 634:	10 92 c7 02 	sts	0x02C7, r1

	// set baudrate
	//UBRR1H = (unsigned char)(baud>>8);
	//UBRR1L = (unsigned char)(baud & 0xFF);
	UBRR1 = 0x0008;
 638:	88 e0       	ldi	r24, 0x08	; 8
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	90 93 cd 00 	sts	0x00CD, r25
 640:	80 93 cc 00 	sts	0x00CC, r24
	//DIR_RXD;

	device = fdevopen( std_putchar, std_getchar );
 644:	81 ee       	ldi	r24, 0xE1	; 225
 646:	92 e0       	ldi	r25, 0x02	; 2
 648:	61 e0       	ldi	r22, 0x01	; 1
 64a:	73 e0       	ldi	r23, 0x03	; 3
 64c:	0e 94 2d 03 	call	0x65a	; 0x65a <fdevopen>
 650:	90 93 c9 02 	sts	0x02C9, r25
 654:	80 93 c8 02 	sts	0x02C8, r24
}
 658:	08 95       	ret

0000065a <fdevopen>:
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	8c 01       	movw	r16, r24
 664:	eb 01       	movw	r28, r22
 666:	00 97       	sbiw	r24, 0x00	; 0
 668:	31 f4       	brne	.+12     	; 0x676 <fdevopen+0x1c>
 66a:	61 15       	cp	r22, r1
 66c:	71 05       	cpc	r23, r1
 66e:	19 f4       	brne	.+6      	; 0x676 <fdevopen+0x1c>
 670:	20 e0       	ldi	r18, 0x00	; 0
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	38 c0       	rjmp	.+112    	; 0x6e6 <fdevopen+0x8c>
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	6e e0       	ldi	r22, 0x0E	; 14
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <calloc>
 682:	fc 01       	movw	r30, r24
 684:	9c 01       	movw	r18, r24
 686:	00 97       	sbiw	r24, 0x00	; 0
 688:	71 f1       	breq	.+92     	; 0x6e6 <fdevopen+0x8c>
 68a:	80 e8       	ldi	r24, 0x80	; 128
 68c:	83 83       	std	Z+3, r24	; 0x03
 68e:	20 97       	sbiw	r28, 0x00	; 0
 690:	71 f0       	breq	.+28     	; 0x6ae <fdevopen+0x54>
 692:	d3 87       	std	Z+11, r29	; 0x0b
 694:	c2 87       	std	Z+10, r28	; 0x0a
 696:	81 e8       	ldi	r24, 0x81	; 129
 698:	83 83       	std	Z+3, r24	; 0x03
 69a:	80 91 ca 02 	lds	r24, 0x02CA
 69e:	90 91 cb 02 	lds	r25, 0x02CB
 6a2:	89 2b       	or	r24, r25
 6a4:	21 f4       	brne	.+8      	; 0x6ae <fdevopen+0x54>
 6a6:	f0 93 cb 02 	sts	0x02CB, r31
 6aa:	e0 93 ca 02 	sts	0x02CA, r30
 6ae:	01 15       	cp	r16, r1
 6b0:	11 05       	cpc	r17, r1
 6b2:	c9 f0       	breq	.+50     	; 0x6e6 <fdevopen+0x8c>
 6b4:	11 87       	std	Z+9, r17	; 0x09
 6b6:	00 87       	std	Z+8, r16	; 0x08
 6b8:	83 81       	ldd	r24, Z+3	; 0x03
 6ba:	82 60       	ori	r24, 0x02	; 2
 6bc:	83 83       	std	Z+3, r24	; 0x03
 6be:	80 91 cc 02 	lds	r24, 0x02CC
 6c2:	90 91 cd 02 	lds	r25, 0x02CD
 6c6:	89 2b       	or	r24, r25
 6c8:	71 f4       	brne	.+28     	; 0x6e6 <fdevopen+0x8c>
 6ca:	f0 93 cd 02 	sts	0x02CD, r31
 6ce:	e0 93 cc 02 	sts	0x02CC, r30
 6d2:	80 91 ce 02 	lds	r24, 0x02CE
 6d6:	90 91 cf 02 	lds	r25, 0x02CF
 6da:	89 2b       	or	r24, r25
 6dc:	21 f4       	brne	.+8      	; 0x6e6 <fdevopen+0x8c>
 6de:	f0 93 cf 02 	sts	0x02CF, r31
 6e2:	e0 93 ce 02 	sts	0x02CE, r30
 6e6:	c9 01       	movw	r24, r18
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	08 95       	ret

000006f2 <printf>:
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	fe 01       	movw	r30, r28
 6fc:	36 96       	adiw	r30, 0x06	; 6
 6fe:	61 91       	ld	r22, Z+
 700:	71 91       	ld	r23, Z+
 702:	80 91 cc 02 	lds	r24, 0x02CC
 706:	90 91 cd 02 	lds	r25, 0x02CD
 70a:	af 01       	movw	r20, r30
 70c:	0e 94 c0 03 	call	0x780	; 0x780 <vfprintf>
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <puts>:
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	8c 01       	movw	r16, r24
 720:	e0 91 cc 02 	lds	r30, 0x02CC
 724:	f0 91 cd 02 	lds	r31, 0x02CD
 728:	83 81       	ldd	r24, Z+3	; 0x03
 72a:	81 ff       	sbrs	r24, 1
 72c:	21 c0       	rjmp	.+66     	; 0x770 <puts+0x5a>
 72e:	c0 e0       	ldi	r28, 0x00	; 0
 730:	d0 e0       	ldi	r29, 0x00	; 0
 732:	0d c0       	rjmp	.+26     	; 0x74e <puts+0x38>
 734:	e0 91 cc 02 	lds	r30, 0x02CC
 738:	f0 91 cd 02 	lds	r31, 0x02CD
 73c:	20 85       	ldd	r18, Z+8	; 0x08
 73e:	31 85       	ldd	r19, Z+9	; 0x09
 740:	bf 01       	movw	r22, r30
 742:	f9 01       	movw	r30, r18
 744:	19 95       	eicall
 746:	89 2b       	or	r24, r25
 748:	11 f0       	breq	.+4      	; 0x74e <puts+0x38>
 74a:	cf ef       	ldi	r28, 0xFF	; 255
 74c:	df ef       	ldi	r29, 0xFF	; 255
 74e:	f8 01       	movw	r30, r16
 750:	81 91       	ld	r24, Z+
 752:	8f 01       	movw	r16, r30
 754:	88 23       	and	r24, r24
 756:	71 f7       	brne	.-36     	; 0x734 <puts+0x1e>
 758:	e0 91 cc 02 	lds	r30, 0x02CC
 75c:	f0 91 cd 02 	lds	r31, 0x02CD
 760:	20 85       	ldd	r18, Z+8	; 0x08
 762:	31 85       	ldd	r19, Z+9	; 0x09
 764:	8a e0       	ldi	r24, 0x0A	; 10
 766:	bf 01       	movw	r22, r30
 768:	f9 01       	movw	r30, r18
 76a:	19 95       	eicall
 76c:	89 2b       	or	r24, r25
 76e:	11 f0       	breq	.+4      	; 0x774 <puts+0x5e>
 770:	cf ef       	ldi	r28, 0xFF	; 255
 772:	df ef       	ldi	r29, 0xFF	; 255
 774:	ce 01       	movw	r24, r28
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	08 95       	ret

00000780 <vfprintf>:
 780:	2f 92       	push	r2
 782:	3f 92       	push	r3
 784:	4f 92       	push	r4
 786:	5f 92       	push	r5
 788:	6f 92       	push	r6
 78a:	7f 92       	push	r7
 78c:	8f 92       	push	r8
 78e:	9f 92       	push	r9
 790:	af 92       	push	r10
 792:	bf 92       	push	r11
 794:	cf 92       	push	r12
 796:	df 92       	push	r13
 798:	ef 92       	push	r14
 79a:	ff 92       	push	r15
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	df 93       	push	r29
 7a2:	cf 93       	push	r28
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
 7a8:	2b 97       	sbiw	r28, 0x0b	; 11
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	3c 01       	movw	r6, r24
 7b6:	2b 01       	movw	r4, r22
 7b8:	5a 01       	movw	r10, r20
 7ba:	fc 01       	movw	r30, r24
 7bc:	17 82       	std	Z+7, r1	; 0x07
 7be:	16 82       	std	Z+6, r1	; 0x06
 7c0:	83 81       	ldd	r24, Z+3	; 0x03
 7c2:	81 fd       	sbrc	r24, 1
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x4c>
 7c6:	6f ef       	ldi	r22, 0xFF	; 255
 7c8:	7f ef       	ldi	r23, 0xFF	; 255
 7ca:	c6 c1       	rjmp	.+908    	; 0xb58 <vfprintf+0x3d8>
 7cc:	9a e0       	ldi	r25, 0x0A	; 10
 7ce:	89 2e       	mov	r8, r25
 7d0:	1e 01       	movw	r2, r28
 7d2:	08 94       	sec
 7d4:	21 1c       	adc	r2, r1
 7d6:	31 1c       	adc	r3, r1
 7d8:	f3 01       	movw	r30, r6
 7da:	23 81       	ldd	r18, Z+3	; 0x03
 7dc:	f2 01       	movw	r30, r4
 7de:	23 fd       	sbrc	r18, 3
 7e0:	85 91       	lpm	r24, Z+
 7e2:	23 ff       	sbrs	r18, 3
 7e4:	81 91       	ld	r24, Z+
 7e6:	2f 01       	movw	r4, r30
 7e8:	88 23       	and	r24, r24
 7ea:	09 f4       	brne	.+2      	; 0x7ee <vfprintf+0x6e>
 7ec:	b2 c1       	rjmp	.+868    	; 0xb52 <vfprintf+0x3d2>
 7ee:	85 32       	cpi	r24, 0x25	; 37
 7f0:	39 f4       	brne	.+14     	; 0x800 <vfprintf+0x80>
 7f2:	23 fd       	sbrc	r18, 3
 7f4:	85 91       	lpm	r24, Z+
 7f6:	23 ff       	sbrs	r18, 3
 7f8:	81 91       	ld	r24, Z+
 7fa:	2f 01       	movw	r4, r30
 7fc:	85 32       	cpi	r24, 0x25	; 37
 7fe:	29 f4       	brne	.+10     	; 0x80a <vfprintf+0x8a>
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	b3 01       	movw	r22, r6
 804:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 808:	e7 cf       	rjmp	.-50     	; 0x7d8 <vfprintf+0x58>
 80a:	98 2f       	mov	r25, r24
 80c:	ff 24       	eor	r15, r15
 80e:	ee 24       	eor	r14, r14
 810:	99 24       	eor	r9, r9
 812:	ff e1       	ldi	r31, 0x1F	; 31
 814:	ff 15       	cp	r31, r15
 816:	d0 f0       	brcs	.+52     	; 0x84c <vfprintf+0xcc>
 818:	9b 32       	cpi	r25, 0x2B	; 43
 81a:	69 f0       	breq	.+26     	; 0x836 <vfprintf+0xb6>
 81c:	9c 32       	cpi	r25, 0x2C	; 44
 81e:	28 f4       	brcc	.+10     	; 0x82a <vfprintf+0xaa>
 820:	90 32       	cpi	r25, 0x20	; 32
 822:	59 f0       	breq	.+22     	; 0x83a <vfprintf+0xba>
 824:	93 32       	cpi	r25, 0x23	; 35
 826:	91 f4       	brne	.+36     	; 0x84c <vfprintf+0xcc>
 828:	0e c0       	rjmp	.+28     	; 0x846 <vfprintf+0xc6>
 82a:	9d 32       	cpi	r25, 0x2D	; 45
 82c:	49 f0       	breq	.+18     	; 0x840 <vfprintf+0xc0>
 82e:	90 33       	cpi	r25, 0x30	; 48
 830:	69 f4       	brne	.+26     	; 0x84c <vfprintf+0xcc>
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	24 c0       	rjmp	.+72     	; 0x87e <vfprintf+0xfe>
 836:	52 e0       	ldi	r21, 0x02	; 2
 838:	f5 2a       	or	r15, r21
 83a:	84 e0       	ldi	r24, 0x04	; 4
 83c:	f8 2a       	or	r15, r24
 83e:	28 c0       	rjmp	.+80     	; 0x890 <vfprintf+0x110>
 840:	98 e0       	ldi	r25, 0x08	; 8
 842:	f9 2a       	or	r15, r25
 844:	25 c0       	rjmp	.+74     	; 0x890 <vfprintf+0x110>
 846:	e0 e1       	ldi	r30, 0x10	; 16
 848:	fe 2a       	or	r15, r30
 84a:	22 c0       	rjmp	.+68     	; 0x890 <vfprintf+0x110>
 84c:	f7 fc       	sbrc	r15, 7
 84e:	29 c0       	rjmp	.+82     	; 0x8a2 <vfprintf+0x122>
 850:	89 2f       	mov	r24, r25
 852:	80 53       	subi	r24, 0x30	; 48
 854:	8a 30       	cpi	r24, 0x0A	; 10
 856:	70 f4       	brcc	.+28     	; 0x874 <vfprintf+0xf4>
 858:	f6 fe       	sbrs	r15, 6
 85a:	05 c0       	rjmp	.+10     	; 0x866 <vfprintf+0xe6>
 85c:	98 9c       	mul	r9, r8
 85e:	90 2c       	mov	r9, r0
 860:	11 24       	eor	r1, r1
 862:	98 0e       	add	r9, r24
 864:	15 c0       	rjmp	.+42     	; 0x890 <vfprintf+0x110>
 866:	e8 9c       	mul	r14, r8
 868:	e0 2c       	mov	r14, r0
 86a:	11 24       	eor	r1, r1
 86c:	e8 0e       	add	r14, r24
 86e:	f0 e2       	ldi	r31, 0x20	; 32
 870:	ff 2a       	or	r15, r31
 872:	0e c0       	rjmp	.+28     	; 0x890 <vfprintf+0x110>
 874:	9e 32       	cpi	r25, 0x2E	; 46
 876:	29 f4       	brne	.+10     	; 0x882 <vfprintf+0x102>
 878:	f6 fc       	sbrc	r15, 6
 87a:	6b c1       	rjmp	.+726    	; 0xb52 <vfprintf+0x3d2>
 87c:	40 e4       	ldi	r20, 0x40	; 64
 87e:	f4 2a       	or	r15, r20
 880:	07 c0       	rjmp	.+14     	; 0x890 <vfprintf+0x110>
 882:	9c 36       	cpi	r25, 0x6C	; 108
 884:	19 f4       	brne	.+6      	; 0x88c <vfprintf+0x10c>
 886:	50 e8       	ldi	r21, 0x80	; 128
 888:	f5 2a       	or	r15, r21
 88a:	02 c0       	rjmp	.+4      	; 0x890 <vfprintf+0x110>
 88c:	98 36       	cpi	r25, 0x68	; 104
 88e:	49 f4       	brne	.+18     	; 0x8a2 <vfprintf+0x122>
 890:	f2 01       	movw	r30, r4
 892:	23 fd       	sbrc	r18, 3
 894:	95 91       	lpm	r25, Z+
 896:	23 ff       	sbrs	r18, 3
 898:	91 91       	ld	r25, Z+
 89a:	2f 01       	movw	r4, r30
 89c:	99 23       	and	r25, r25
 89e:	09 f0       	breq	.+2      	; 0x8a2 <vfprintf+0x122>
 8a0:	b8 cf       	rjmp	.-144    	; 0x812 <vfprintf+0x92>
 8a2:	89 2f       	mov	r24, r25
 8a4:	85 54       	subi	r24, 0x45	; 69
 8a6:	83 30       	cpi	r24, 0x03	; 3
 8a8:	18 f0       	brcs	.+6      	; 0x8b0 <vfprintf+0x130>
 8aa:	80 52       	subi	r24, 0x20	; 32
 8ac:	83 30       	cpi	r24, 0x03	; 3
 8ae:	38 f4       	brcc	.+14     	; 0x8be <vfprintf+0x13e>
 8b0:	44 e0       	ldi	r20, 0x04	; 4
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	a4 0e       	add	r10, r20
 8b6:	b5 1e       	adc	r11, r21
 8b8:	5f e3       	ldi	r21, 0x3F	; 63
 8ba:	59 83       	std	Y+1, r21	; 0x01
 8bc:	0f c0       	rjmp	.+30     	; 0x8dc <vfprintf+0x15c>
 8be:	93 36       	cpi	r25, 0x63	; 99
 8c0:	31 f0       	breq	.+12     	; 0x8ce <vfprintf+0x14e>
 8c2:	93 37       	cpi	r25, 0x73	; 115
 8c4:	79 f0       	breq	.+30     	; 0x8e4 <vfprintf+0x164>
 8c6:	93 35       	cpi	r25, 0x53	; 83
 8c8:	09 f0       	breq	.+2      	; 0x8cc <vfprintf+0x14c>
 8ca:	56 c0       	rjmp	.+172    	; 0x978 <vfprintf+0x1f8>
 8cc:	20 c0       	rjmp	.+64     	; 0x90e <vfprintf+0x18e>
 8ce:	f5 01       	movw	r30, r10
 8d0:	80 81       	ld	r24, Z
 8d2:	89 83       	std	Y+1, r24	; 0x01
 8d4:	42 e0       	ldi	r20, 0x02	; 2
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	a4 0e       	add	r10, r20
 8da:	b5 1e       	adc	r11, r21
 8dc:	61 01       	movw	r12, r2
 8de:	01 e0       	ldi	r16, 0x01	; 1
 8e0:	10 e0       	ldi	r17, 0x00	; 0
 8e2:	12 c0       	rjmp	.+36     	; 0x908 <vfprintf+0x188>
 8e4:	f5 01       	movw	r30, r10
 8e6:	c0 80       	ld	r12, Z
 8e8:	d1 80       	ldd	r13, Z+1	; 0x01
 8ea:	f6 fc       	sbrc	r15, 6
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <vfprintf+0x174>
 8ee:	6f ef       	ldi	r22, 0xFF	; 255
 8f0:	7f ef       	ldi	r23, 0xFF	; 255
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <vfprintf+0x178>
 8f4:	69 2d       	mov	r22, r9
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	42 e0       	ldi	r20, 0x02	; 2
 8fa:	50 e0       	ldi	r21, 0x00	; 0
 8fc:	a4 0e       	add	r10, r20
 8fe:	b5 1e       	adc	r11, r21
 900:	c6 01       	movw	r24, r12
 902:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <strnlen>
 906:	8c 01       	movw	r16, r24
 908:	5f e7       	ldi	r21, 0x7F	; 127
 90a:	f5 22       	and	r15, r21
 90c:	14 c0       	rjmp	.+40     	; 0x936 <vfprintf+0x1b6>
 90e:	f5 01       	movw	r30, r10
 910:	c0 80       	ld	r12, Z
 912:	d1 80       	ldd	r13, Z+1	; 0x01
 914:	f6 fc       	sbrc	r15, 6
 916:	03 c0       	rjmp	.+6      	; 0x91e <vfprintf+0x19e>
 918:	6f ef       	ldi	r22, 0xFF	; 255
 91a:	7f ef       	ldi	r23, 0xFF	; 255
 91c:	02 c0       	rjmp	.+4      	; 0x922 <vfprintf+0x1a2>
 91e:	69 2d       	mov	r22, r9
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	42 e0       	ldi	r20, 0x02	; 2
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	a4 0e       	add	r10, r20
 928:	b5 1e       	adc	r11, r21
 92a:	c6 01       	movw	r24, r12
 92c:	0e 94 e7 06 	call	0xdce	; 0xdce <strnlen_P>
 930:	8c 01       	movw	r16, r24
 932:	50 e8       	ldi	r21, 0x80	; 128
 934:	f5 2a       	or	r15, r21
 936:	f3 fe       	sbrs	r15, 3
 938:	07 c0       	rjmp	.+14     	; 0x948 <vfprintf+0x1c8>
 93a:	1a c0       	rjmp	.+52     	; 0x970 <vfprintf+0x1f0>
 93c:	80 e2       	ldi	r24, 0x20	; 32
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	b3 01       	movw	r22, r6
 942:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 946:	ea 94       	dec	r14
 948:	8e 2d       	mov	r24, r14
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	08 17       	cp	r16, r24
 94e:	19 07       	cpc	r17, r25
 950:	a8 f3       	brcs	.-22     	; 0x93c <vfprintf+0x1bc>
 952:	0e c0       	rjmp	.+28     	; 0x970 <vfprintf+0x1f0>
 954:	f6 01       	movw	r30, r12
 956:	f7 fc       	sbrc	r15, 7
 958:	85 91       	lpm	r24, Z+
 95a:	f7 fe       	sbrs	r15, 7
 95c:	81 91       	ld	r24, Z+
 95e:	6f 01       	movw	r12, r30
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	b3 01       	movw	r22, r6
 964:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 968:	e1 10       	cpse	r14, r1
 96a:	ea 94       	dec	r14
 96c:	01 50       	subi	r16, 0x01	; 1
 96e:	10 40       	sbci	r17, 0x00	; 0
 970:	01 15       	cp	r16, r1
 972:	11 05       	cpc	r17, r1
 974:	79 f7       	brne	.-34     	; 0x954 <vfprintf+0x1d4>
 976:	ea c0       	rjmp	.+468    	; 0xb4c <vfprintf+0x3cc>
 978:	94 36       	cpi	r25, 0x64	; 100
 97a:	11 f0       	breq	.+4      	; 0x980 <vfprintf+0x200>
 97c:	99 36       	cpi	r25, 0x69	; 105
 97e:	69 f5       	brne	.+90     	; 0x9da <vfprintf+0x25a>
 980:	f7 fe       	sbrs	r15, 7
 982:	08 c0       	rjmp	.+16     	; 0x994 <vfprintf+0x214>
 984:	f5 01       	movw	r30, r10
 986:	20 81       	ld	r18, Z
 988:	31 81       	ldd	r19, Z+1	; 0x01
 98a:	42 81       	ldd	r20, Z+2	; 0x02
 98c:	53 81       	ldd	r21, Z+3	; 0x03
 98e:	84 e0       	ldi	r24, 0x04	; 4
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0a c0       	rjmp	.+20     	; 0x9a8 <vfprintf+0x228>
 994:	f5 01       	movw	r30, r10
 996:	80 81       	ld	r24, Z
 998:	91 81       	ldd	r25, Z+1	; 0x01
 99a:	9c 01       	movw	r18, r24
 99c:	44 27       	eor	r20, r20
 99e:	37 fd       	sbrc	r19, 7
 9a0:	40 95       	com	r20
 9a2:	54 2f       	mov	r21, r20
 9a4:	82 e0       	ldi	r24, 0x02	; 2
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	a8 0e       	add	r10, r24
 9aa:	b9 1e       	adc	r11, r25
 9ac:	9f e6       	ldi	r25, 0x6F	; 111
 9ae:	f9 22       	and	r15, r25
 9b0:	57 ff       	sbrs	r21, 7
 9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <vfprintf+0x246>
 9b4:	50 95       	com	r21
 9b6:	40 95       	com	r20
 9b8:	30 95       	com	r19
 9ba:	21 95       	neg	r18
 9bc:	3f 4f       	sbci	r19, 0xFF	; 255
 9be:	4f 4f       	sbci	r20, 0xFF	; 255
 9c0:	5f 4f       	sbci	r21, 0xFF	; 255
 9c2:	e0 e8       	ldi	r30, 0x80	; 128
 9c4:	fe 2a       	or	r15, r30
 9c6:	ca 01       	movw	r24, r20
 9c8:	b9 01       	movw	r22, r18
 9ca:	a1 01       	movw	r20, r2
 9cc:	2a e0       	ldi	r18, 0x0A	; 10
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	0e 94 30 07 	call	0xe60	; 0xe60 <__ultoa_invert>
 9d4:	d8 2e       	mov	r13, r24
 9d6:	d2 18       	sub	r13, r2
 9d8:	40 c0       	rjmp	.+128    	; 0xa5a <vfprintf+0x2da>
 9da:	95 37       	cpi	r25, 0x75	; 117
 9dc:	29 f4       	brne	.+10     	; 0x9e8 <vfprintf+0x268>
 9de:	1f 2d       	mov	r17, r15
 9e0:	1f 7e       	andi	r17, 0xEF	; 239
 9e2:	2a e0       	ldi	r18, 0x0A	; 10
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	1d c0       	rjmp	.+58     	; 0xa22 <vfprintf+0x2a2>
 9e8:	1f 2d       	mov	r17, r15
 9ea:	19 7f       	andi	r17, 0xF9	; 249
 9ec:	9f 36       	cpi	r25, 0x6F	; 111
 9ee:	61 f0       	breq	.+24     	; 0xa08 <vfprintf+0x288>
 9f0:	90 37       	cpi	r25, 0x70	; 112
 9f2:	20 f4       	brcc	.+8      	; 0x9fc <vfprintf+0x27c>
 9f4:	98 35       	cpi	r25, 0x58	; 88
 9f6:	09 f0       	breq	.+2      	; 0x9fa <vfprintf+0x27a>
 9f8:	ac c0       	rjmp	.+344    	; 0xb52 <vfprintf+0x3d2>
 9fa:	0f c0       	rjmp	.+30     	; 0xa1a <vfprintf+0x29a>
 9fc:	90 37       	cpi	r25, 0x70	; 112
 9fe:	39 f0       	breq	.+14     	; 0xa0e <vfprintf+0x28e>
 a00:	98 37       	cpi	r25, 0x78	; 120
 a02:	09 f0       	breq	.+2      	; 0xa06 <vfprintf+0x286>
 a04:	a6 c0       	rjmp	.+332    	; 0xb52 <vfprintf+0x3d2>
 a06:	04 c0       	rjmp	.+8      	; 0xa10 <vfprintf+0x290>
 a08:	28 e0       	ldi	r18, 0x08	; 8
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	0a c0       	rjmp	.+20     	; 0xa22 <vfprintf+0x2a2>
 a0e:	10 61       	ori	r17, 0x10	; 16
 a10:	14 fd       	sbrc	r17, 4
 a12:	14 60       	ori	r17, 0x04	; 4
 a14:	20 e1       	ldi	r18, 0x10	; 16
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <vfprintf+0x2a2>
 a1a:	14 fd       	sbrc	r17, 4
 a1c:	16 60       	ori	r17, 0x06	; 6
 a1e:	20 e1       	ldi	r18, 0x10	; 16
 a20:	32 e0       	ldi	r19, 0x02	; 2
 a22:	17 ff       	sbrs	r17, 7
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <vfprintf+0x2b6>
 a26:	f5 01       	movw	r30, r10
 a28:	60 81       	ld	r22, Z
 a2a:	71 81       	ldd	r23, Z+1	; 0x01
 a2c:	82 81       	ldd	r24, Z+2	; 0x02
 a2e:	93 81       	ldd	r25, Z+3	; 0x03
 a30:	44 e0       	ldi	r20, 0x04	; 4
 a32:	50 e0       	ldi	r21, 0x00	; 0
 a34:	08 c0       	rjmp	.+16     	; 0xa46 <vfprintf+0x2c6>
 a36:	f5 01       	movw	r30, r10
 a38:	80 81       	ld	r24, Z
 a3a:	91 81       	ldd	r25, Z+1	; 0x01
 a3c:	bc 01       	movw	r22, r24
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	42 e0       	ldi	r20, 0x02	; 2
 a44:	50 e0       	ldi	r21, 0x00	; 0
 a46:	a4 0e       	add	r10, r20
 a48:	b5 1e       	adc	r11, r21
 a4a:	a1 01       	movw	r20, r2
 a4c:	0e 94 30 07 	call	0xe60	; 0xe60 <__ultoa_invert>
 a50:	d8 2e       	mov	r13, r24
 a52:	d2 18       	sub	r13, r2
 a54:	8f e7       	ldi	r24, 0x7F	; 127
 a56:	f8 2e       	mov	r15, r24
 a58:	f1 22       	and	r15, r17
 a5a:	f6 fe       	sbrs	r15, 6
 a5c:	0b c0       	rjmp	.+22     	; 0xa74 <vfprintf+0x2f4>
 a5e:	5e ef       	ldi	r21, 0xFE	; 254
 a60:	f5 22       	and	r15, r21
 a62:	d9 14       	cp	r13, r9
 a64:	38 f4       	brcc	.+14     	; 0xa74 <vfprintf+0x2f4>
 a66:	f4 fe       	sbrs	r15, 4
 a68:	07 c0       	rjmp	.+14     	; 0xa78 <vfprintf+0x2f8>
 a6a:	f2 fc       	sbrc	r15, 2
 a6c:	05 c0       	rjmp	.+10     	; 0xa78 <vfprintf+0x2f8>
 a6e:	8f ee       	ldi	r24, 0xEF	; 239
 a70:	f8 22       	and	r15, r24
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <vfprintf+0x2f8>
 a74:	1d 2d       	mov	r17, r13
 a76:	01 c0       	rjmp	.+2      	; 0xa7a <vfprintf+0x2fa>
 a78:	19 2d       	mov	r17, r9
 a7a:	f4 fe       	sbrs	r15, 4
 a7c:	0d c0       	rjmp	.+26     	; 0xa98 <vfprintf+0x318>
 a7e:	fe 01       	movw	r30, r28
 a80:	ed 0d       	add	r30, r13
 a82:	f1 1d       	adc	r31, r1
 a84:	80 81       	ld	r24, Z
 a86:	80 33       	cpi	r24, 0x30	; 48
 a88:	19 f4       	brne	.+6      	; 0xa90 <vfprintf+0x310>
 a8a:	99 ee       	ldi	r25, 0xE9	; 233
 a8c:	f9 22       	and	r15, r25
 a8e:	08 c0       	rjmp	.+16     	; 0xaa0 <vfprintf+0x320>
 a90:	1f 5f       	subi	r17, 0xFF	; 255
 a92:	f2 fe       	sbrs	r15, 2
 a94:	05 c0       	rjmp	.+10     	; 0xaa0 <vfprintf+0x320>
 a96:	03 c0       	rjmp	.+6      	; 0xa9e <vfprintf+0x31e>
 a98:	8f 2d       	mov	r24, r15
 a9a:	86 78       	andi	r24, 0x86	; 134
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <vfprintf+0x320>
 a9e:	1f 5f       	subi	r17, 0xFF	; 255
 aa0:	0f 2d       	mov	r16, r15
 aa2:	f3 fc       	sbrc	r15, 3
 aa4:	14 c0       	rjmp	.+40     	; 0xace <vfprintf+0x34e>
 aa6:	f0 fe       	sbrs	r15, 0
 aa8:	0f c0       	rjmp	.+30     	; 0xac8 <vfprintf+0x348>
 aaa:	1e 15       	cp	r17, r14
 aac:	10 f0       	brcs	.+4      	; 0xab2 <vfprintf+0x332>
 aae:	9d 2c       	mov	r9, r13
 ab0:	0b c0       	rjmp	.+22     	; 0xac8 <vfprintf+0x348>
 ab2:	9d 2c       	mov	r9, r13
 ab4:	9e 0c       	add	r9, r14
 ab6:	91 1a       	sub	r9, r17
 ab8:	1e 2d       	mov	r17, r14
 aba:	06 c0       	rjmp	.+12     	; 0xac8 <vfprintf+0x348>
 abc:	80 e2       	ldi	r24, 0x20	; 32
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	b3 01       	movw	r22, r6
 ac2:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 ac6:	1f 5f       	subi	r17, 0xFF	; 255
 ac8:	1e 15       	cp	r17, r14
 aca:	c0 f3       	brcs	.-16     	; 0xabc <vfprintf+0x33c>
 acc:	04 c0       	rjmp	.+8      	; 0xad6 <vfprintf+0x356>
 ace:	1e 15       	cp	r17, r14
 ad0:	10 f4       	brcc	.+4      	; 0xad6 <vfprintf+0x356>
 ad2:	e1 1a       	sub	r14, r17
 ad4:	01 c0       	rjmp	.+2      	; 0xad8 <vfprintf+0x358>
 ad6:	ee 24       	eor	r14, r14
 ad8:	04 ff       	sbrs	r16, 4
 ada:	0f c0       	rjmp	.+30     	; 0xafa <vfprintf+0x37a>
 adc:	80 e3       	ldi	r24, 0x30	; 48
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	b3 01       	movw	r22, r6
 ae2:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 ae6:	02 ff       	sbrs	r16, 2
 ae8:	1d c0       	rjmp	.+58     	; 0xb24 <vfprintf+0x3a4>
 aea:	01 fd       	sbrc	r16, 1
 aec:	03 c0       	rjmp	.+6      	; 0xaf4 <vfprintf+0x374>
 aee:	88 e7       	ldi	r24, 0x78	; 120
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e c0       	rjmp	.+28     	; 0xb10 <vfprintf+0x390>
 af4:	88 e5       	ldi	r24, 0x58	; 88
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0b c0       	rjmp	.+22     	; 0xb10 <vfprintf+0x390>
 afa:	80 2f       	mov	r24, r16
 afc:	86 78       	andi	r24, 0x86	; 134
 afe:	91 f0       	breq	.+36     	; 0xb24 <vfprintf+0x3a4>
 b00:	01 ff       	sbrs	r16, 1
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <vfprintf+0x388>
 b04:	8b e2       	ldi	r24, 0x2B	; 43
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <vfprintf+0x38a>
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	f7 fc       	sbrc	r15, 7
 b0c:	8d e2       	ldi	r24, 0x2D	; 45
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	b3 01       	movw	r22, r6
 b12:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 b16:	06 c0       	rjmp	.+12     	; 0xb24 <vfprintf+0x3a4>
 b18:	80 e3       	ldi	r24, 0x30	; 48
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	b3 01       	movw	r22, r6
 b1e:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 b22:	9a 94       	dec	r9
 b24:	d9 14       	cp	r13, r9
 b26:	c0 f3       	brcs	.-16     	; 0xb18 <vfprintf+0x398>
 b28:	da 94       	dec	r13
 b2a:	f1 01       	movw	r30, r2
 b2c:	ed 0d       	add	r30, r13
 b2e:	f1 1d       	adc	r31, r1
 b30:	80 81       	ld	r24, Z
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	b3 01       	movw	r22, r6
 b36:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 b3a:	dd 20       	and	r13, r13
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <vfprintf+0x3a8>
 b3e:	06 c0       	rjmp	.+12     	; 0xb4c <vfprintf+0x3cc>
 b40:	80 e2       	ldi	r24, 0x20	; 32
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	b3 01       	movw	r22, r6
 b46:	0e 94 04 07 	call	0xe08	; 0xe08 <fputc>
 b4a:	ea 94       	dec	r14
 b4c:	ee 20       	and	r14, r14
 b4e:	c1 f7       	brne	.-16     	; 0xb40 <vfprintf+0x3c0>
 b50:	43 ce       	rjmp	.-890    	; 0x7d8 <vfprintf+0x58>
 b52:	f3 01       	movw	r30, r6
 b54:	66 81       	ldd	r22, Z+6	; 0x06
 b56:	77 81       	ldd	r23, Z+7	; 0x07
 b58:	cb 01       	movw	r24, r22
 b5a:	2b 96       	adiw	r28, 0x0b	; 11
 b5c:	0f b6       	in	r0, 0x3f	; 63
 b5e:	f8 94       	cli
 b60:	de bf       	out	0x3e, r29	; 62
 b62:	0f be       	out	0x3f, r0	; 63
 b64:	cd bf       	out	0x3d, r28	; 61
 b66:	cf 91       	pop	r28
 b68:	df 91       	pop	r29
 b6a:	1f 91       	pop	r17
 b6c:	0f 91       	pop	r16
 b6e:	ff 90       	pop	r15
 b70:	ef 90       	pop	r14
 b72:	df 90       	pop	r13
 b74:	cf 90       	pop	r12
 b76:	bf 90       	pop	r11
 b78:	af 90       	pop	r10
 b7a:	9f 90       	pop	r9
 b7c:	8f 90       	pop	r8
 b7e:	7f 90       	pop	r7
 b80:	6f 90       	pop	r6
 b82:	5f 90       	pop	r5
 b84:	4f 90       	pop	r4
 b86:	3f 90       	pop	r3
 b88:	2f 90       	pop	r2
 b8a:	08 95       	ret

00000b8c <calloc>:
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	cf 93       	push	r28
 b92:	df 93       	push	r29
 b94:	68 9f       	mul	r22, r24
 b96:	80 01       	movw	r16, r0
 b98:	69 9f       	mul	r22, r25
 b9a:	10 0d       	add	r17, r0
 b9c:	78 9f       	mul	r23, r24
 b9e:	10 0d       	add	r17, r0
 ba0:	11 24       	eor	r1, r1
 ba2:	c8 01       	movw	r24, r16
 ba4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <malloc>
 ba8:	ec 01       	movw	r28, r24
 baa:	00 97       	sbiw	r24, 0x00	; 0
 bac:	29 f0       	breq	.+10     	; 0xbb8 <calloc+0x2c>
 bae:	60 e0       	ldi	r22, 0x00	; 0
 bb0:	70 e0       	ldi	r23, 0x00	; 0
 bb2:	a8 01       	movw	r20, r16
 bb4:	0e 94 f2 06 	call	0xde4	; 0xde4 <memset>
 bb8:	ce 01       	movw	r24, r28
 bba:	df 91       	pop	r29
 bbc:	cf 91       	pop	r28
 bbe:	1f 91       	pop	r17
 bc0:	0f 91       	pop	r16
 bc2:	08 95       	ret

00000bc4 <malloc>:
 bc4:	cf 93       	push	r28
 bc6:	df 93       	push	r29
 bc8:	bc 01       	movw	r22, r24
 bca:	82 30       	cpi	r24, 0x02	; 2
 bcc:	91 05       	cpc	r25, r1
 bce:	10 f4       	brcc	.+4      	; 0xbd4 <malloc+0x10>
 bd0:	62 e0       	ldi	r22, 0x02	; 2
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	a0 91 d2 02 	lds	r26, 0x02D2
 bd8:	b0 91 d3 02 	lds	r27, 0x02D3
 bdc:	ed 01       	movw	r28, r26
 bde:	e0 e0       	ldi	r30, 0x00	; 0
 be0:	f0 e0       	ldi	r31, 0x00	; 0
 be2:	40 e0       	ldi	r20, 0x00	; 0
 be4:	50 e0       	ldi	r21, 0x00	; 0
 be6:	21 c0       	rjmp	.+66     	; 0xc2a <malloc+0x66>
 be8:	88 81       	ld	r24, Y
 bea:	99 81       	ldd	r25, Y+1	; 0x01
 bec:	86 17       	cp	r24, r22
 bee:	97 07       	cpc	r25, r23
 bf0:	69 f4       	brne	.+26     	; 0xc0c <malloc+0x48>
 bf2:	8a 81       	ldd	r24, Y+2	; 0x02
 bf4:	9b 81       	ldd	r25, Y+3	; 0x03
 bf6:	30 97       	sbiw	r30, 0x00	; 0
 bf8:	19 f0       	breq	.+6      	; 0xc00 <malloc+0x3c>
 bfa:	93 83       	std	Z+3, r25	; 0x03
 bfc:	82 83       	std	Z+2, r24	; 0x02
 bfe:	04 c0       	rjmp	.+8      	; 0xc08 <malloc+0x44>
 c00:	90 93 d3 02 	sts	0x02D3, r25
 c04:	80 93 d2 02 	sts	0x02D2, r24
 c08:	fe 01       	movw	r30, r28
 c0a:	34 c0       	rjmp	.+104    	; 0xc74 <malloc+0xb0>
 c0c:	68 17       	cp	r22, r24
 c0e:	79 07       	cpc	r23, r25
 c10:	38 f4       	brcc	.+14     	; 0xc20 <malloc+0x5c>
 c12:	41 15       	cp	r20, r1
 c14:	51 05       	cpc	r21, r1
 c16:	19 f0       	breq	.+6      	; 0xc1e <malloc+0x5a>
 c18:	84 17       	cp	r24, r20
 c1a:	95 07       	cpc	r25, r21
 c1c:	08 f4       	brcc	.+2      	; 0xc20 <malloc+0x5c>
 c1e:	ac 01       	movw	r20, r24
 c20:	fe 01       	movw	r30, r28
 c22:	8a 81       	ldd	r24, Y+2	; 0x02
 c24:	9b 81       	ldd	r25, Y+3	; 0x03
 c26:	9c 01       	movw	r18, r24
 c28:	e9 01       	movw	r28, r18
 c2a:	20 97       	sbiw	r28, 0x00	; 0
 c2c:	e9 f6       	brne	.-70     	; 0xbe8 <malloc+0x24>
 c2e:	41 15       	cp	r20, r1
 c30:	51 05       	cpc	r21, r1
 c32:	a9 f1       	breq	.+106    	; 0xc9e <malloc+0xda>
 c34:	ca 01       	movw	r24, r20
 c36:	86 1b       	sub	r24, r22
 c38:	97 0b       	sbc	r25, r23
 c3a:	04 97       	sbiw	r24, 0x04	; 4
 c3c:	08 f4       	brcc	.+2      	; 0xc40 <malloc+0x7c>
 c3e:	ba 01       	movw	r22, r20
 c40:	e0 e0       	ldi	r30, 0x00	; 0
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	2a c0       	rjmp	.+84     	; 0xc9a <malloc+0xd6>
 c46:	8d 91       	ld	r24, X+
 c48:	9c 91       	ld	r25, X
 c4a:	11 97       	sbiw	r26, 0x01	; 1
 c4c:	84 17       	cp	r24, r20
 c4e:	95 07       	cpc	r25, r21
 c50:	f9 f4       	brne	.+62     	; 0xc90 <malloc+0xcc>
 c52:	64 17       	cp	r22, r20
 c54:	75 07       	cpc	r23, r21
 c56:	81 f4       	brne	.+32     	; 0xc78 <malloc+0xb4>
 c58:	12 96       	adiw	r26, 0x02	; 2
 c5a:	8d 91       	ld	r24, X+
 c5c:	9c 91       	ld	r25, X
 c5e:	13 97       	sbiw	r26, 0x03	; 3
 c60:	30 97       	sbiw	r30, 0x00	; 0
 c62:	19 f0       	breq	.+6      	; 0xc6a <malloc+0xa6>
 c64:	93 83       	std	Z+3, r25	; 0x03
 c66:	82 83       	std	Z+2, r24	; 0x02
 c68:	04 c0       	rjmp	.+8      	; 0xc72 <malloc+0xae>
 c6a:	90 93 d3 02 	sts	0x02D3, r25
 c6e:	80 93 d2 02 	sts	0x02D2, r24
 c72:	fd 01       	movw	r30, r26
 c74:	32 96       	adiw	r30, 0x02	; 2
 c76:	4f c0       	rjmp	.+158    	; 0xd16 <malloc+0x152>
 c78:	ca 01       	movw	r24, r20
 c7a:	86 1b       	sub	r24, r22
 c7c:	97 0b       	sbc	r25, r23
 c7e:	fd 01       	movw	r30, r26
 c80:	e8 0f       	add	r30, r24
 c82:	f9 1f       	adc	r31, r25
 c84:	61 93       	st	Z+, r22
 c86:	71 93       	st	Z+, r23
 c88:	02 97       	sbiw	r24, 0x02	; 2
 c8a:	8d 93       	st	X+, r24
 c8c:	9c 93       	st	X, r25
 c8e:	43 c0       	rjmp	.+134    	; 0xd16 <malloc+0x152>
 c90:	fd 01       	movw	r30, r26
 c92:	82 81       	ldd	r24, Z+2	; 0x02
 c94:	93 81       	ldd	r25, Z+3	; 0x03
 c96:	9c 01       	movw	r18, r24
 c98:	d9 01       	movw	r26, r18
 c9a:	10 97       	sbiw	r26, 0x00	; 0
 c9c:	a1 f6       	brne	.-88     	; 0xc46 <malloc+0x82>
 c9e:	80 91 d0 02 	lds	r24, 0x02D0
 ca2:	90 91 d1 02 	lds	r25, 0x02D1
 ca6:	89 2b       	or	r24, r25
 ca8:	41 f4       	brne	.+16     	; 0xcba <malloc+0xf6>
 caa:	80 91 3b 02 	lds	r24, 0x023B
 cae:	90 91 3c 02 	lds	r25, 0x023C
 cb2:	90 93 d1 02 	sts	0x02D1, r25
 cb6:	80 93 d0 02 	sts	0x02D0, r24
 cba:	40 91 3d 02 	lds	r20, 0x023D
 cbe:	50 91 3e 02 	lds	r21, 0x023E
 cc2:	41 15       	cp	r20, r1
 cc4:	51 05       	cpc	r21, r1
 cc6:	41 f4       	brne	.+16     	; 0xcd8 <malloc+0x114>
 cc8:	4d b7       	in	r20, 0x3d	; 61
 cca:	5e b7       	in	r21, 0x3e	; 62
 ccc:	80 91 39 02 	lds	r24, 0x0239
 cd0:	90 91 3a 02 	lds	r25, 0x023A
 cd4:	48 1b       	sub	r20, r24
 cd6:	59 0b       	sbc	r21, r25
 cd8:	20 91 d0 02 	lds	r18, 0x02D0
 cdc:	30 91 d1 02 	lds	r19, 0x02D1
 ce0:	24 17       	cp	r18, r20
 ce2:	35 07       	cpc	r19, r21
 ce4:	b0 f4       	brcc	.+44     	; 0xd12 <malloc+0x14e>
 ce6:	ca 01       	movw	r24, r20
 ce8:	82 1b       	sub	r24, r18
 cea:	93 0b       	sbc	r25, r19
 cec:	86 17       	cp	r24, r22
 cee:	97 07       	cpc	r25, r23
 cf0:	80 f0       	brcs	.+32     	; 0xd12 <malloc+0x14e>
 cf2:	ab 01       	movw	r20, r22
 cf4:	4e 5f       	subi	r20, 0xFE	; 254
 cf6:	5f 4f       	sbci	r21, 0xFF	; 255
 cf8:	84 17       	cp	r24, r20
 cfa:	95 07       	cpc	r25, r21
 cfc:	50 f0       	brcs	.+20     	; 0xd12 <malloc+0x14e>
 cfe:	42 0f       	add	r20, r18
 d00:	53 1f       	adc	r21, r19
 d02:	50 93 d1 02 	sts	0x02D1, r21
 d06:	40 93 d0 02 	sts	0x02D0, r20
 d0a:	f9 01       	movw	r30, r18
 d0c:	61 93       	st	Z+, r22
 d0e:	71 93       	st	Z+, r23
 d10:	02 c0       	rjmp	.+4      	; 0xd16 <malloc+0x152>
 d12:	e0 e0       	ldi	r30, 0x00	; 0
 d14:	f0 e0       	ldi	r31, 0x00	; 0
 d16:	cf 01       	movw	r24, r30
 d18:	df 91       	pop	r29
 d1a:	cf 91       	pop	r28
 d1c:	08 95       	ret

00000d1e <free>:
 d1e:	cf 93       	push	r28
 d20:	df 93       	push	r29
 d22:	00 97       	sbiw	r24, 0x00	; 0
 d24:	09 f4       	brne	.+2      	; 0xd28 <free+0xa>
 d26:	50 c0       	rjmp	.+160    	; 0xdc8 <free+0xaa>
 d28:	ec 01       	movw	r28, r24
 d2a:	22 97       	sbiw	r28, 0x02	; 2
 d2c:	1b 82       	std	Y+3, r1	; 0x03
 d2e:	1a 82       	std	Y+2, r1	; 0x02
 d30:	a0 91 d2 02 	lds	r26, 0x02D2
 d34:	b0 91 d3 02 	lds	r27, 0x02D3
 d38:	10 97       	sbiw	r26, 0x00	; 0
 d3a:	09 f1       	breq	.+66     	; 0xd7e <free+0x60>
 d3c:	40 e0       	ldi	r20, 0x00	; 0
 d3e:	50 e0       	ldi	r21, 0x00	; 0
 d40:	ac 17       	cp	r26, r28
 d42:	bd 07       	cpc	r27, r29
 d44:	08 f1       	brcs	.+66     	; 0xd88 <free+0x6a>
 d46:	bb 83       	std	Y+3, r27	; 0x03
 d48:	aa 83       	std	Y+2, r26	; 0x02
 d4a:	fe 01       	movw	r30, r28
 d4c:	21 91       	ld	r18, Z+
 d4e:	31 91       	ld	r19, Z+
 d50:	e2 0f       	add	r30, r18
 d52:	f3 1f       	adc	r31, r19
 d54:	ae 17       	cp	r26, r30
 d56:	bf 07       	cpc	r27, r31
 d58:	79 f4       	brne	.+30     	; 0xd78 <free+0x5a>
 d5a:	8d 91       	ld	r24, X+
 d5c:	9c 91       	ld	r25, X
 d5e:	11 97       	sbiw	r26, 0x01	; 1
 d60:	28 0f       	add	r18, r24
 d62:	39 1f       	adc	r19, r25
 d64:	2e 5f       	subi	r18, 0xFE	; 254
 d66:	3f 4f       	sbci	r19, 0xFF	; 255
 d68:	39 83       	std	Y+1, r19	; 0x01
 d6a:	28 83       	st	Y, r18
 d6c:	12 96       	adiw	r26, 0x02	; 2
 d6e:	8d 91       	ld	r24, X+
 d70:	9c 91       	ld	r25, X
 d72:	13 97       	sbiw	r26, 0x03	; 3
 d74:	9b 83       	std	Y+3, r25	; 0x03
 d76:	8a 83       	std	Y+2, r24	; 0x02
 d78:	41 15       	cp	r20, r1
 d7a:	51 05       	cpc	r21, r1
 d7c:	71 f4       	brne	.+28     	; 0xd9a <free+0x7c>
 d7e:	d0 93 d3 02 	sts	0x02D3, r29
 d82:	c0 93 d2 02 	sts	0x02D2, r28
 d86:	20 c0       	rjmp	.+64     	; 0xdc8 <free+0xaa>
 d88:	12 96       	adiw	r26, 0x02	; 2
 d8a:	8d 91       	ld	r24, X+
 d8c:	9c 91       	ld	r25, X
 d8e:	13 97       	sbiw	r26, 0x03	; 3
 d90:	ad 01       	movw	r20, r26
 d92:	00 97       	sbiw	r24, 0x00	; 0
 d94:	11 f0       	breq	.+4      	; 0xd9a <free+0x7c>
 d96:	dc 01       	movw	r26, r24
 d98:	d3 cf       	rjmp	.-90     	; 0xd40 <free+0x22>
 d9a:	fa 01       	movw	r30, r20
 d9c:	d3 83       	std	Z+3, r29	; 0x03
 d9e:	c2 83       	std	Z+2, r28	; 0x02
 da0:	21 91       	ld	r18, Z+
 da2:	31 91       	ld	r19, Z+
 da4:	e2 0f       	add	r30, r18
 da6:	f3 1f       	adc	r31, r19
 da8:	ce 17       	cp	r28, r30
 daa:	df 07       	cpc	r29, r31
 dac:	69 f4       	brne	.+26     	; 0xdc8 <free+0xaa>
 dae:	88 81       	ld	r24, Y
 db0:	99 81       	ldd	r25, Y+1	; 0x01
 db2:	28 0f       	add	r18, r24
 db4:	39 1f       	adc	r19, r25
 db6:	2e 5f       	subi	r18, 0xFE	; 254
 db8:	3f 4f       	sbci	r19, 0xFF	; 255
 dba:	fa 01       	movw	r30, r20
 dbc:	31 83       	std	Z+1, r19	; 0x01
 dbe:	20 83       	st	Z, r18
 dc0:	8a 81       	ldd	r24, Y+2	; 0x02
 dc2:	9b 81       	ldd	r25, Y+3	; 0x03
 dc4:	93 83       	std	Z+3, r25	; 0x03
 dc6:	82 83       	std	Z+2, r24	; 0x02
 dc8:	df 91       	pop	r29
 dca:	cf 91       	pop	r28
 dcc:	08 95       	ret

00000dce <strnlen_P>:
 dce:	fc 01       	movw	r30, r24
 dd0:	05 90       	lpm	r0, Z+
 dd2:	61 50       	subi	r22, 0x01	; 1
 dd4:	70 40       	sbci	r23, 0x00	; 0
 dd6:	01 10       	cpse	r0, r1
 dd8:	d8 f7       	brcc	.-10     	; 0xdd0 <strnlen_P+0x2>
 dda:	80 95       	com	r24
 ddc:	90 95       	com	r25
 dde:	8e 0f       	add	r24, r30
 de0:	9f 1f       	adc	r25, r31
 de2:	08 95       	ret

00000de4 <memset>:
 de4:	dc 01       	movw	r26, r24
 de6:	01 c0       	rjmp	.+2      	; 0xdea <memset+0x6>
 de8:	6d 93       	st	X+, r22
 dea:	41 50       	subi	r20, 0x01	; 1
 dec:	50 40       	sbci	r21, 0x00	; 0
 dee:	e0 f7       	brcc	.-8      	; 0xde8 <memset+0x4>
 df0:	08 95       	ret

00000df2 <strnlen>:
 df2:	fc 01       	movw	r30, r24
 df4:	61 50       	subi	r22, 0x01	; 1
 df6:	70 40       	sbci	r23, 0x00	; 0
 df8:	01 90       	ld	r0, Z+
 dfa:	01 10       	cpse	r0, r1
 dfc:	d8 f7       	brcc	.-10     	; 0xdf4 <strnlen+0x2>
 dfe:	80 95       	com	r24
 e00:	90 95       	com	r25
 e02:	8e 0f       	add	r24, r30
 e04:	9f 1f       	adc	r25, r31
 e06:	08 95       	ret

00000e08 <fputc>:
 e08:	0f 93       	push	r16
 e0a:	1f 93       	push	r17
 e0c:	cf 93       	push	r28
 e0e:	df 93       	push	r29
 e10:	8c 01       	movw	r16, r24
 e12:	eb 01       	movw	r28, r22
 e14:	8b 81       	ldd	r24, Y+3	; 0x03
 e16:	81 ff       	sbrs	r24, 1
 e18:	1b c0       	rjmp	.+54     	; 0xe50 <fputc+0x48>
 e1a:	82 ff       	sbrs	r24, 2
 e1c:	0d c0       	rjmp	.+26     	; 0xe38 <fputc+0x30>
 e1e:	2e 81       	ldd	r18, Y+6	; 0x06
 e20:	3f 81       	ldd	r19, Y+7	; 0x07
 e22:	8c 81       	ldd	r24, Y+4	; 0x04
 e24:	9d 81       	ldd	r25, Y+5	; 0x05
 e26:	28 17       	cp	r18, r24
 e28:	39 07       	cpc	r19, r25
 e2a:	64 f4       	brge	.+24     	; 0xe44 <fputc+0x3c>
 e2c:	e8 81       	ld	r30, Y
 e2e:	f9 81       	ldd	r31, Y+1	; 0x01
 e30:	01 93       	st	Z+, r16
 e32:	f9 83       	std	Y+1, r31	; 0x01
 e34:	e8 83       	st	Y, r30
 e36:	06 c0       	rjmp	.+12     	; 0xe44 <fputc+0x3c>
 e38:	e8 85       	ldd	r30, Y+8	; 0x08
 e3a:	f9 85       	ldd	r31, Y+9	; 0x09
 e3c:	80 2f       	mov	r24, r16
 e3e:	19 95       	eicall
 e40:	89 2b       	or	r24, r25
 e42:	31 f4       	brne	.+12     	; 0xe50 <fputc+0x48>
 e44:	8e 81       	ldd	r24, Y+6	; 0x06
 e46:	9f 81       	ldd	r25, Y+7	; 0x07
 e48:	01 96       	adiw	r24, 0x01	; 1
 e4a:	9f 83       	std	Y+7, r25	; 0x07
 e4c:	8e 83       	std	Y+6, r24	; 0x06
 e4e:	02 c0       	rjmp	.+4      	; 0xe54 <fputc+0x4c>
 e50:	0f ef       	ldi	r16, 0xFF	; 255
 e52:	1f ef       	ldi	r17, 0xFF	; 255
 e54:	c8 01       	movw	r24, r16
 e56:	df 91       	pop	r29
 e58:	cf 91       	pop	r28
 e5a:	1f 91       	pop	r17
 e5c:	0f 91       	pop	r16
 e5e:	08 95       	ret

00000e60 <__ultoa_invert>:
 e60:	fa 01       	movw	r30, r20
 e62:	aa 27       	eor	r26, r26
 e64:	28 30       	cpi	r18, 0x08	; 8
 e66:	51 f1       	breq	.+84     	; 0xebc <__ultoa_invert+0x5c>
 e68:	20 31       	cpi	r18, 0x10	; 16
 e6a:	81 f1       	breq	.+96     	; 0xecc <__ultoa_invert+0x6c>
 e6c:	e8 94       	clt
 e6e:	6f 93       	push	r22
 e70:	6e 7f       	andi	r22, 0xFE	; 254
 e72:	6e 5f       	subi	r22, 0xFE	; 254
 e74:	7f 4f       	sbci	r23, 0xFF	; 255
 e76:	8f 4f       	sbci	r24, 0xFF	; 255
 e78:	9f 4f       	sbci	r25, 0xFF	; 255
 e7a:	af 4f       	sbci	r26, 0xFF	; 255
 e7c:	b1 e0       	ldi	r27, 0x01	; 1
 e7e:	3e d0       	rcall	.+124    	; 0xefc <__ultoa_invert+0x9c>
 e80:	b4 e0       	ldi	r27, 0x04	; 4
 e82:	3c d0       	rcall	.+120    	; 0xefc <__ultoa_invert+0x9c>
 e84:	67 0f       	add	r22, r23
 e86:	78 1f       	adc	r23, r24
 e88:	89 1f       	adc	r24, r25
 e8a:	9a 1f       	adc	r25, r26
 e8c:	a1 1d       	adc	r26, r1
 e8e:	68 0f       	add	r22, r24
 e90:	79 1f       	adc	r23, r25
 e92:	8a 1f       	adc	r24, r26
 e94:	91 1d       	adc	r25, r1
 e96:	a1 1d       	adc	r26, r1
 e98:	6a 0f       	add	r22, r26
 e9a:	71 1d       	adc	r23, r1
 e9c:	81 1d       	adc	r24, r1
 e9e:	91 1d       	adc	r25, r1
 ea0:	a1 1d       	adc	r26, r1
 ea2:	20 d0       	rcall	.+64     	; 0xee4 <__ultoa_invert+0x84>
 ea4:	09 f4       	brne	.+2      	; 0xea8 <__ultoa_invert+0x48>
 ea6:	68 94       	set
 ea8:	3f 91       	pop	r19
 eaa:	2a e0       	ldi	r18, 0x0A	; 10
 eac:	26 9f       	mul	r18, r22
 eae:	11 24       	eor	r1, r1
 eb0:	30 19       	sub	r19, r0
 eb2:	30 5d       	subi	r19, 0xD0	; 208
 eb4:	31 93       	st	Z+, r19
 eb6:	de f6       	brtc	.-74     	; 0xe6e <__ultoa_invert+0xe>
 eb8:	cf 01       	movw	r24, r30
 eba:	08 95       	ret
 ebc:	46 2f       	mov	r20, r22
 ebe:	47 70       	andi	r20, 0x07	; 7
 ec0:	40 5d       	subi	r20, 0xD0	; 208
 ec2:	41 93       	st	Z+, r20
 ec4:	b3 e0       	ldi	r27, 0x03	; 3
 ec6:	0f d0       	rcall	.+30     	; 0xee6 <__ultoa_invert+0x86>
 ec8:	c9 f7       	brne	.-14     	; 0xebc <__ultoa_invert+0x5c>
 eca:	f6 cf       	rjmp	.-20     	; 0xeb8 <__ultoa_invert+0x58>
 ecc:	46 2f       	mov	r20, r22
 ece:	4f 70       	andi	r20, 0x0F	; 15
 ed0:	40 5d       	subi	r20, 0xD0	; 208
 ed2:	4a 33       	cpi	r20, 0x3A	; 58
 ed4:	18 f0       	brcs	.+6      	; 0xedc <__ultoa_invert+0x7c>
 ed6:	49 5d       	subi	r20, 0xD9	; 217
 ed8:	31 fd       	sbrc	r19, 1
 eda:	40 52       	subi	r20, 0x20	; 32
 edc:	41 93       	st	Z+, r20
 ede:	02 d0       	rcall	.+4      	; 0xee4 <__ultoa_invert+0x84>
 ee0:	a9 f7       	brne	.-22     	; 0xecc <__ultoa_invert+0x6c>
 ee2:	ea cf       	rjmp	.-44     	; 0xeb8 <__ultoa_invert+0x58>
 ee4:	b4 e0       	ldi	r27, 0x04	; 4
 ee6:	a6 95       	lsr	r26
 ee8:	97 95       	ror	r25
 eea:	87 95       	ror	r24
 eec:	77 95       	ror	r23
 eee:	67 95       	ror	r22
 ef0:	ba 95       	dec	r27
 ef2:	c9 f7       	brne	.-14     	; 0xee6 <__ultoa_invert+0x86>
 ef4:	00 97       	sbiw	r24, 0x00	; 0
 ef6:	61 05       	cpc	r22, r1
 ef8:	71 05       	cpc	r23, r1
 efa:	08 95       	ret
 efc:	9b 01       	movw	r18, r22
 efe:	ac 01       	movw	r20, r24
 f00:	0a 2e       	mov	r0, r26
 f02:	06 94       	lsr	r0
 f04:	57 95       	ror	r21
 f06:	47 95       	ror	r20
 f08:	37 95       	ror	r19
 f0a:	27 95       	ror	r18
 f0c:	ba 95       	dec	r27
 f0e:	c9 f7       	brne	.-14     	; 0xf02 <__ultoa_invert+0xa2>
 f10:	62 0f       	add	r22, r18
 f12:	73 1f       	adc	r23, r19
 f14:	84 1f       	adc	r24, r20
 f16:	95 1f       	adc	r25, r21
 f18:	a0 1d       	adc	r26, r0
 f1a:	08 95       	ret

00000f1c <_exit>:
 f1c:	f8 94       	cli

00000f1e <__stop_program>:
 f1e:	ff cf       	rjmp	.-2      	; 0xf1e <__stop_program>
